From ddd3f94b310ed034dc707f613b188c939dd07b08 Mon Sep 17 00:00:00 2001
From: "duncan.macleod" <duncan.macleod@ligo.org>
Date: Mon, 13 Nov 2023 13:11:27 +0000
Subject: [PATCH 5/5] test: restructure pytest suite

- don't create files in the current working directory, use temporary files via fixtures
- use parametrize to create unique tests for each read data type, makes it easier to see which one fails
---
 test/test_frvect.py | 196 +++++++++++++++++++++++++-------------------
 1 file changed, 111 insertions(+), 85 deletions(-)

diff --git a/test/test_frvect.py b/test/test_frvect.py
index b501d61..69ab8d1 100644
--- a/test/test_frvect.py
+++ b/test/test_frvect.py
@@ -1,95 +1,121 @@
-import framel
+from pathlib import Path
+
+import pytest
+
 import numpy as np
-import collections
-import time
 
-FILENAME="test.gwf"
+import framel
+
+#: directory containing test data files
+DATA_PATH = Path(__file__).parent / "data"
+
+#: list of 'testStat' GWF files
+STAT_DATA_FILES = [
+    pytest.param(x, id=x.name)
+    for x in DATA_PATH.glob("testStat*.gwf")
+]
+
+DATA_TYPES = {
+    "INT16": np.int16,
+    "INT32": np.int32,
+    "INT64": np.int64,
+    "UINT8": np.uint8,
+    "UINT16": np.uint16,
+    "UINT32": np.uint32,
+    "UINT64": np.uint64,
+    "FLOAT32": np.float32,
+    "FLOAT64": np.float64,
+    "COMPLEX64": np.complex64,
+    "COMPLEX128": np.complex128,
+}
+FRDATA_TYPE = ["PROC", "ADC", "SIM"]
+NUM_CHANNEL_TYPE = 7  # see GWF spec 4.3.2.11
+NUM_CHANNEL_SUBTYPE = 7  # see GWF spec 4.3.2.11
 CHANNELNAME = "V1:test_channel"
-DATA = np.arange(100000)
 START = 100000000
 DX = 1.e6
 X_UNIT = "sec"
 Y_UNIT = "Hz"
 
-# Setup the channellist, testing all datatypes and options
-testchannelsdtype = [
-   np.int16,
-   np.int32,
-   np.int64,
-   np.uint8,
-   np.uint16,
-   np.uint32,
-   np.uint64,
-   np.float32,
-   np.float64,
-   np.complex64,
-   np.complex128
-]
-testchannelstype = [0, 1, 2, 3, 4, 5, 6]
-testchannelssubtype = [0, 1, 2, 3, 4, 5, 6]
-testchannelkind = ["PROC", "ADC", "SIM"]
-numchannels = len(testchannelsdtype)
-itype = 0
-isubtype = 0
-ikind = 0
-CHANNELLIST = []
-for i in range(numchannels):
-
-   CHANNELLIST.append(
-      {
-          "name":    f"{CHANNELNAME}{i}",
-          "data":    DATA.astype(testchannelsdtype[i]),
-          "start":   START,
-          "dx":      DX,
-          "x_unit":  X_UNIT,
-          "y_unit":  Y_UNIT,
-          "kind":    testchannelkind[ikind],
-          "type":    testchannelstype[itype],
-          "subType": testchannelssubtype[isubtype],
-          "history": "Test string",
-          "verbose": True
-      },
-   )
-
-   if itype<len(testchannelstype)-1:
-      itype+=1
-   if isubtype<len(testchannelssubtype)-1:
-      isubtype+=1
-   if ikind<len(testchannelkind)-1:
-      ikind+=1
-
-def test_frputvect():
-   framel.frputvect(FILENAME, CHANNELLIST)
-
-def test_frgetvect():
-
-   for i in range(numchannels):
-
-      idata, istart, istartX, idx, unitX, unitY = \
-         framel.frgetvect1d(FILENAME, f"{CHANNELNAME}{i}", verbose=True)
-
-      # Check the input datas is the same as the output data
-      assert np.array_equal(DATA.astype(testchannelsdtype[i]),idata)
-      assert START==istart
-      assert DX==idx
-      assert X_UNIT==unitX
-      assert Y_UNIT==unitY
-
-
-def test_frgetvect_stat():
-
-   framel.frgetvect1d("data/testStatShort.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatInt.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatLong.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatUChar.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatUShort.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatUInt.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatULong.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatFloat.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatDouble.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatComplexFloat.gwf", f"gain", start=1000000010, verbose=True)
-   framel.frgetvect1d("data/testStatComplexDouble.gwf", f"gain", start=1000000010, verbose=True)
 
-def test_frgetevent():
+@pytest.fixture(scope="module")
+def datafile(tmp_path_factory):
+    """Create a GWF file with lots of data in it.
+
+    The `scope="module"` means that this file is created once for all tests
+    to use, and should contain one channel for each numpy type, iterating
+    over the various permutations of frdata type, channel type, and channel
+    subtype.
+    """
+    # create temporary directory for these data
+    tmpdir = tmp_path_factory.mktemp("data")
+    gwf = str(tmpdir / "test.gwf")
+
+    data = np.arange(100000)
 
-   framel.frgetevent("data/testEvent.gwf",verbose=True)
\ No newline at end of file
+    # Setup the channellist, testing all datatypes and options
+    channels = []
+    for i, dtype in enumerate(DATA_TYPES):
+        channels.append({
+            "name":    f"{CHANNELNAME}_{dtype}",
+            "data":    data.astype(DATA_TYPES[dtype]),
+            "start":   START,
+            "dx":      DX,
+            "x_unit":  X_UNIT,
+            "y_unit":  Y_UNIT,
+            "kind":    FRDATA_TYPE[i % len(FRDATA_TYPE)],
+            "type":    i % NUM_CHANNEL_TYPE,
+            "subType": i % NUM_CHANNEL_SUBTYPE,
+            "history": "Test string",
+            "verbose": True,
+        })
+
+    framel.frputvect(gwf, channels)
+    return gwf
+
+
+# test is redundant with datafile fixture above
+#def test_frputvect():
+#    pass
+
+
+@pytest.mark.parametrize("dtype", DATA_TYPES)
+def test_frgetvect(datafile, dtype):
+    """Test that `frgetvect1d` can read a channel from a GWF file.
+    """
+    # read the data
+    data, start, startX, dx, unitX, unitY = framel.frgetvect1d(
+        datafile,
+        f"{CHANNELNAME}_{dtype}",
+        verbose=True,
+    )
+
+    # assert that we get what we should
+    assert data.dtype.type is DATA_TYPES[dtype]
+    assert start == START
+    assert dx == DX
+    assert unitX == X_UNIT
+    assert unitY == Y_UNIT
+
+
+@pytest.mark.parametrize("gwf", STAT_DATA_FILES)
+def test_frgetvect_stat(gwf):
+    """Test that `frgetvect1d` can read the test data files.
+    """
+    data, start, startX, dx, unitX, unitY = framel.frgetvect1d(
+        str(gwf),
+        f"gain",
+        start=1000000010,
+        verbose=True,
+    )
+    assert start == 0
+    assert startX == 0
+    assert dx == 1.0
+    assert unitX == "relatif_gain"
+    assert unitY == ""
+
+
+def test_frgetevent():
+    """Test that `frgetevent()` can read data.
+    """
+    framel.frgetevent(str(DATA_PATH / "testEvent.gwf"), verbose=True)
-- 
2.39.2

